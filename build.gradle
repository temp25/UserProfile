plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
//	id 'war'
	id 'eclipse'
	id 'maven'
	id 'com.google.cloud.tools.jib' version '1.8.0'
	id 'com.bmuschko.docker-spring-boot-application' version '6.1.1'
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import java.util.concurrent.Callable
/*import com.bmuschko.gradle.docker.tasks.image.Dockerfile.From
import com.bmuschko.gradle.docker.tasks.image.Dockerfile.Instruction
import com.bmuschko.gradle.docker.tasks.image.Dockerfile.FromInstruction*/

group = 'com.paddyseedexpert'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '1.8'
ext.mainClassName = 'com.paddyseedexpert.userprofile.UserProfileApplication'

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.github.gotham25:TurboSMTP:1.0.1'
	runtimeOnly 'mysql:mysql-connector-java'
    //	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    
    //Added for logzio
    implementation 'io.logz.logback:logzio-logback-appender:1.0.24'

    //Added for logDNA
    implementation 'net.zileo:logback-logdna:1.0.1'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.28'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

task runJar(type: JavaExec) {
	description = "Runs the assembled jar as a java application in command line"
	main = "-jar"
	args jar.archivePath
}

task createPom  {
    pom {
        project {
            groupId 'com.paddyseedexpert'
            artifactId 'userprofile'
            version '1.0.0-SNAPSHOT'

            inceptionYear '2008'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("pom.xml")
}

jib {
    to {
       image = '2467027/user-test'
       auth {
          username = '2467027'
          password = '2b033451-c5ea-4068-96d2-bac7bc463a99'
       }
    }
}

task createDockerfile(type: Dockerfile) {
	
    description 'Generate docker file for the application'

	from(project.provider(new Callable() {
         @Override
         Dockerfile.From call() throws Exception {
             new Dockerfile.From('openjdk:8-jdk-alpine').withStage('build')
         }
     }))
    label(['maintainer': 'Natanael Copa <ncopa@alpinelinux.org>'])
    runCommand('apk add --update busybox-suid')
    workingDir('/workspace/app')
    runCommand('addgroup -S gowtham && adduser -S gowtham -G gowtham')
    runCommand('chown -R gowtham:gowtham /workspace/app')
    instruction('\n')

    copyFile('gradlew', '.')
    copyFile('gradle', 'gradle')
    copyFile('build.gradle', '.')
    runCommand('chmod 777 gradlew')
    user('gowtham')
    runCommand('./gradlew dependencies')
    instruction('\n')

    copyFile('src', 'src')
    runCommand('./gradlew clean build -x test')
    runCommand('mkdir -p build/dependency && (cd build/dependency; jar -xf ../libs/*.jar)')
    instruction('\n')

    from 'openjdk:8-jre-alpine'
    label(['maintainer': 'Natanael Copa <ncopa@alpinelinux.org>'])
    runCommand('apk add --update busybox-suid')
    runCommand('addgroup -S gowtham && adduser -S gowtham -G gowtham')
    user('gowtham')
    volume('/tmp')
    instruction('HEALTHCHECK --interval=5s --timeout=2s --retries=12 CMD curl --silent --fail localhost:2573/userProfileController/status || exit 1')
    arg('DEPENDENCY=/workspace/app/build/dependency')
    copyFile('--from=build ${DEPENDENCY}/BOOT-INF/lib', '/app/lib')
    copyFile('--from=build ${DEPENDENCY}/META-INF', '/app/META-INF')
    copyFile('--from=build ${DEPENDENCY}/BOOT-INF/classes', '/app')
    entryPoint('java', '-cp', 'app:app/lib/*', mainClassName)
    instruction('\n')

    exposePort(2573)

}
